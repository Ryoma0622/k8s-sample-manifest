# For Ingress

helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace
helm upgrade --install ingress-nginx-internal ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx-internal --create-namespace -f internal-nginx-values.yaml

helm upgrade --install sample-app-ns sample-app-ns
helm upgrade --install sample-app-ingress-rc sample-app-ingress -n sample-app-ingress-rc
helm upgrade --install sample-app-ingress sample-app-ingress --set ingress.isProduction=true -n sample-app-ingress

# For Release

helm upgrade --install sample-app-100 sample-app --set image.tag=1.0.0 --set ingress.className=nginx --create-namespace -n sample-app-100
kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8880:80

curl -v 'http://sample-app-100.example.com:8880/api/sample'

# For RC

helm upgrade --install sample-app-200 sample-app --set image.tag=2.0.0 --set ingress.className=nginx-internal --create-namespace -n sample-app-200
kubectl port-forward --namespace=ingress-nginx-internal service/ingress-nginx-internal-controller 8888:80

curl -v 'http://sample-app-200.example.com:8888/api/sample'

# Change Services

helm upgrade --install sample-app-blue sample-app -n sample-app --set image.tag=1.0.0 --set ingress.className=nginx --set service.name=sample-app-green
helm upgrade --install sample-app-green sample-app -n sample-app --set image.tag=2.0.0 --set ingress.className=nginx-internal --set service.name=sample-app-blue

helm upgrade --install sample-app-blue sample-app -n sample-app --set image.tag=1.0.0 --set ingress.className=nginx
helm upgrade --install sample-app-green sample-app -n sample-app --set image.tag=2.0.0 --set ingress.className=nginx-internal

# Kubeseal

brew install kubeseal
helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets
helm install sealed-secrets -n kube-system --set-string fullnameOverride=sealed-secrets-controller sealed-secrets/sealed-secrets
kubectl create secret generic sample-app-nginx-crt-secret --dry-run=client --from-file=hogehoge.crt -o yaml > sample-app-nginx-crt-secret.yaml
kubeseal --scope cluster-wide -f sample-app-nginx-crt-secret.yaml -w sample-app-nginx-crt-seald-secret.yaml

# ArgoCD

helm repo add argo https://argoproj.github.io/argo-helm

helm install argocd argo/argo-cd -n argocd --create-namespace
kubectl port-forward svc/argocd-server -n argocd 8080:443
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
argocd login localhost:8080
argocd account update-password

argocd repo add https://github.com/Ryoma0622/sample-rest-api.git

argocd app create sample-app-ns \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app-ns \
  --dest-server https://kubernetes.default.svc \
  --sync-policy automated \
  --upsert

argocd app create sample-app-ingress \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app-ingress \
  --helm-set ingress.isProduction=true \
  --dest-namespace sample-app-ingress \
  --dest-server https://kubernetes.default.svc \
  --upsert

argocd app create sample-app-ingress-rc \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app-ingress \
  --dest-namespace sample-app-ingress-rc \
  --dest-server https://kubernetes.default.svc \
  --upsert

argocd app create sample-app-100 \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app \
  --helm-set image.tag=1.0.0 \
  --helm-set ingress.className=nginx \
  --dest-namespace sample-app-100 \
  --dest-server https://kubernetes.default.svc \
  --upsert

argocd app create sample-app-200 \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app \
  --helm-set image.tag=2.0.0 \
  --helm-set ingress.className=nginx-internal \
  --dest-namespace sample-app-200 \
  --dest-server https://kubernetes.default.svc \
  --upsert

argocd app create sample-app-ingress-canary \
  --repo https://github.com/Ryoma0622/sample-rest-api.git \
  --path k8s-manifests/Charts/sample-app-ingress \
  --helm-set ingress.isCanaryEnabled=true \
  --dest-namespace sample-app-ingress \
  --dest-server https://kubernetes.default.svc \
  --upsert

# Other

## For Benchmark

```
kubectl run -n sample-app-100 -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.0000000000001; do wget -q -O- http://sample-app-100/api/sample; done"
```
